# Taken From SFML Config.cmake
# Perform host-specific configurations and detect the compiler.
if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    # detect the architecture (note: this test won't work for cross-compilation)
    include(CheckTypeSize)

    # Proxy check the size of a void*, (8 byte on x64, 4 on x86).
    check_type_size(void* SIZEOF_VOID_PTR)
    if(${SIZEOF_VOID_PTR} STREQUAL "4")
        set(ARCH_32BITS 1)
    elseif(${SIZEOF_VOID_PTR} STREQUAL "8")
        set(ARCH_64BITS 1)
    else()
        message(FATAL_ERROR "Unsupported architecture")
        return()
    endif()
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
        if(NOT IOS)
                # detect OS X version. (use '/usr/bin/sw_vers -productVersion' to extract V from '10.V.x'.)
                EXEC_PROGRAM(/usr/bin/sw_vers ARGS -productVersion OUTPUT_VARIABLE MACOSX_VERSION_RAW)
                STRING(REGEX REPLACE "10\\.([0-9]+).*" "\\1" MACOSX_VERSION "${MACOSX_VERSION_RAW}")
                if(${MACOSX_VERSION} LESS 7)
                message(FATAL_ERROR "Unsupported version of OS X: ${MACOSX_VERSION_RAW}")
                return()
        endif()
    endif()
else()
    message(FATAL_ERROR "Unsupported operating system or environment")
    return()
endif()

# detect the compiler and its version
# Note: on some platforms (OS X), CMAKE_COMPILER_IS_GNUCXX is true
# even when CLANG is used, therefore the Clang test is done first
if(CMAKE_CXX_COMPILER MATCHES "clang[+][+]" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
   # CMAKE_CXX_COMPILER_ID is an internal CMake variable subject to change,
   # but there is no other way to detect CLang at the moment
   set(ATA_COMPILER_CLANG 1)
   execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "--version" OUTPUT_VARIABLE CLANG_VERSION_OUTPUT)
   string(REGEX REPLACE ".*clang version ([0-9]+\\.[0-9]+).*" "\\1" ATA_CLANG_VERSION "${CLANG_VERSION_OUTPUT}")
elseif(CMAKE_COMPILER_IS_GNUCXX)
    set(ATA_COMPILER_GCC 1)
    execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "-dumpversion" OUTPUT_VARIABLE GCC_VERSION_OUTPUT)
    string(REGEX REPLACE "([0-9]+\\.[0-9]+).*" "\\1" ATA_GCC_VERSION "${GCC_VERSION_OUTPUT}")
    execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "--version" OUTPUT_VARIABLE GCC_COMPILER_VERSION)
    string(REGEX MATCHALL ".*(tdm[64]*-[1-9]).*" ATA_COMPILER_GCC_TDM "${GCC_COMPILER_VERSION}")
    execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "-dumpmachine" OUTPUT_VARIABLE GCC_MACHINE)
    string(STRIP "${GCC_MACHINE}" GCC_MACHINE)
    if(GCC_MACHINE MATCHES ".*w64.*")
        set(ATA_COMPILER_GCC_W64 1)
    endif()
elseif(MSVC)
    set(ATA_COMPILER_MSVC 1)
    if(MSVC_VERSION EQUAL 1400)
        set(ATA_MSVC_VERSION 8)
    elseif(MSVC_VERSION EQUAL 1500)
        set(ATA_MSVC_VERSION 9)
    elseif(MSVC_VERSION EQUAL 1600)
        set(ATA_MSVC_VERSION 10)
    elseif(MSVC_VERSION EQUAL 1700)
        set(ATA_MSVC_VERSION 11)
    elseif(MSVC_VERSION EQUAL 1800)
        set(ATA_MSVC_VERSION 12)
    elseif(MSVC_VERSION EQUAL 1900)
        set(ATA_MSVC_VERSION 14)
    endif()
else()
    message(FATAL_ERROR "Unsupported compiler")
    return()
endif()
